@page "/"
@using Client.Components.SmallComponents
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager NavManager;
@using DTO;
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@rendermode InteractiveServer
@implements IDisposable

<PageTitle>Home</PageTitle>
<h1> Количество доступных книг: </h1>
<div>
    <p>Общее количество: @TotalCount </p>
    <p>Кол-во доступных: @AvailableCount </p>

    <h2> Книги </h2>
    <p> Книга     | Можно забрать    | Дата последнего обновления </p>
    @foreach(var book in BooksDict.Values)
    {
        <BookView Name=@book.Name IsAvailable =@book.IsAvailable UpdateTime=@book.UpdateTime></BookView>
    }
</div>

@code {
    private HubConnection? hubConnection;
    private readonly HttpClient httpClient = new HttpClient();
    Dictionary<Guid,BookDTO> BooksDict = new();
    int TotalCount { get; set; }
    int AvailableCount { get; set; }
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
                            .WithUrl("http://localhost:5006/BooksInfoHub")
                            .WithAutomaticReconnect()
                            .Build();
        hubConnection.On<LibraryData>("onRecieveStatistics", DoStuff);

        await hubConnection.StartAsync();
        var books = await httpClient.GetFromJsonAsync<ICollection<BookDTO>>("https://localhost:7141/api/Books");
        TotalCount = books.Count;
        AvailableCount = books.Count(x => x.IsAvailable);
        foreach (var book in books)
        {
            BooksDict.Add(book.Id, book);
        }

    }
    
    private async Task DoStuff(LibraryData data)
    {
        TotalCount = data.TotalBooksCount;
        AvailableCount = data.AvailableBooksCount;
        foreach(var book in data.Books)
        {
            if(!BooksDict.Keys.Contains(book.Id))
            {
                BooksDict.Add(book.Id, book);
            }
            BooksDict[book.Id] = book;
        }
        Console.WriteLine(data);
        await InvokeAsync(StateHasChanged);
    }

    void IDisposable.Dispose()
    {
        httpClient.Dispose();
    }

}